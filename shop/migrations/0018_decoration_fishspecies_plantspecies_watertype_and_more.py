# Generated by Django 5.0.6 on 2025-03-17 08:36

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('shop', '0017_orderdeliveryassignment_otp'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Decoration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('image', models.ImageField(blank=True, null=True, upload_to='decorations/')),
                ('material', models.CharField(max_length=100)),
                ('size', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='FishSpecies',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('scientific_name', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.TextField()),
                ('image', models.ImageField(blank=True, null=True, upload_to='fish_species/')),
                ('min_tank_size', models.IntegerField(help_text='Minimum tank size in gallons')),
                ('max_size', models.DecimalField(decimal_places=2, help_text='Maximum size in inches', max_digits=5)),
                ('temperature_min', models.DecimalField(decimal_places=1, help_text='Minimum temperature in °F', max_digits=4)),
                ('temperature_max', models.DecimalField(decimal_places=1, help_text='Maximum temperature in °F', max_digits=4)),
                ('ph_min', models.DecimalField(decimal_places=1, max_digits=3)),
                ('ph_max', models.DecimalField(decimal_places=1, max_digits=3)),
                ('aggression_level', models.CharField(choices=[('peaceful', 'Peaceful'), ('semi-aggressive', 'Semi-Aggressive'), ('aggressive', 'Aggressive')], max_length=50)),
                ('schooling', models.BooleanField(default=False, help_text='Whether this fish prefers to be in schools')),
                ('min_school_size', models.IntegerField(default=1, help_text='Minimum number of fish for schooling species')),
            ],
        ),
        migrations.CreateModel(
            name='PlantSpecies',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('scientific_name', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.TextField()),
                ('image', models.ImageField(blank=True, null=True, upload_to='plant_species/')),
                ('light_requirement', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], max_length=50)),
                ('growth_rate', models.CharField(choices=[('slow', 'Slow'), ('medium', 'Medium'), ('fast', 'Fast')], max_length=50)),
                ('difficulty', models.CharField(choices=[('easy', 'Easy'), ('moderate', 'Moderate'), ('advanced', 'Advanced')], max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='WaterType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='AquariumDesign',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('tank_size', models.IntegerField(help_text='Tank size in gallons')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('water_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop.watertype')),
            ],
        ),
        migrations.CreateModel(
            name='AquariumDecoration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(default=1)),
                ('position_x', models.IntegerField(default=0, help_text='X position in the aquarium visualization')),
                ('position_y', models.IntegerField(default=0, help_text='Y position in the aquarium visualization')),
                ('aquarium', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop.aquariumdesign')),
                ('decoration', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop.decoration')),
            ],
        ),
        migrations.CreateModel(
            name='AquariumFish',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(default=1)),
                ('position_x', models.IntegerField(default=0, help_text='X position in the aquarium visualization')),
                ('position_y', models.IntegerField(default=0, help_text='Y position in the aquarium visualization')),
                ('aquarium', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop.aquariumdesign')),
                ('fish', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop.fishspecies')),
            ],
        ),
        migrations.CreateModel(
            name='AquariumPlant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(default=1)),
                ('position_x', models.IntegerField(default=0, help_text='X position in the aquarium visualization')),
                ('position_y', models.IntegerField(default=0, help_text='Y position in the aquarium visualization')),
                ('aquarium', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop.aquariumdesign')),
                ('plant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop.plantspecies')),
            ],
        ),
        migrations.AddField(
            model_name='plantspecies',
            name='water_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop.watertype'),
        ),
        migrations.AddField(
            model_name='fishspecies',
            name='water_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop.watertype'),
        ),
        migrations.CreateModel(
            name='FishCompatibility',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('compatibility_level', models.CharField(choices=[('compatible', 'Compatible'), ('caution', 'Caution'), ('incompatible', 'Incompatible')], max_length=50)),
                ('notes', models.TextField(blank=True, null=True)),
                ('species1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='compatibility_as_species1', to='shop.fishspecies')),
                ('species2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='compatibility_as_species2', to='shop.fishspecies')),
            ],
            options={
                'unique_together': {('species1', 'species2')},
            },
        ),
    ]
